generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  email    String   @unique
  id       Int      @default(autoincrement()) @id
  name     String
  password String
  isAdmin  Boolean  @default(false)
  players  Player[]
}

model Game {
  id         Int      @default(autoincrement()) @id
  name       String 
  state      Boolean  @default(true)
  startTurns Int      @default(10)
  startLand  Int      @default(100)
  startMoney Int      @default(10000)
  startFood  Int      @default(1000)
  safeTurns  Int      @default(100)
  turnTime   Int      @default(600)
  lastTurn   DateTime?
  turnsDone  Int      @default(0)
  gameDone   Int      @default(4320)
  players    Player[]
}

model Player {
  // Structure elements for the player
  id             Int    @default(autoincrement()) @id
  name           String
  user           User   @relation(fields: [userId], references: [id])
  userId         Int
  game           Game   @relation(fields: [gameId], references: [id])
  gameId         Int
  // Current general data for player
  availableTurns Int
  money          Float  @default(0)
  food           Int    @default(0)
  population     Int    @default(0)
  taxRate        Float  @default(15)
  // Generation rates for types
  genTroopers    Int    @default(20)
  genTurrets     Int    @default(20)
  genBombers     Int    @default(20)
  genTanks       Int    @default(20)
  genCarriers    Int    @default(20)
  // Current land available and usage
  lndAvailable   Int    @default(0)
  lndCoastal     Int    @default(0)
  lndCity        Int    @default(0)
  lndAgriculture Int    @default(0)
  lndIndustrial  Int    @default(0)
  // Current army
  troopers       Int    @default(0)
  turrets        Int    @default(0)
  bombers        Int    @default(0)
  tanks          Int    @default(0)
  carriers       Int    @default(0)
  // Current and completed turns
  currentTurn    Turn?  @relation(name: "CurrentTurn", fields: [currentTurnId], references: [id])
  currentTurnId  Int?
  completedTurns Turn[]
  defends        Attack[]
  @@unique(name: "NameGame", fields: [name, gameId])
  @@unique(name: "UserGame", fields: [userId, gameId])
}

model Turn {
  // Structure for the turn
  id              Int      @default(autoincrement()) @id
  player          Player   @relation(fields: [playerId], references: [id])
  playerId        Int
  createdAt       DateTime @default(now())
  completedAt     DateTime? // Set at the COMPLETE time and removed from active
  currentPhase    Int      @default(0) //0 = START, 1 = PAYMENT, 2 = BUILD, 3 = ATTACK, 4 = CHANGE, 5 = COMPLETE
  // Phase one - core turn results - START
  popGrowth       Int      @default(0)
  popTax          Float    @default(0)
  incomeCoastal   Float    @default(0)
  incomeCity      Float    @default(0)
  incomeIndustrial Float   @default(0)
  foodGrown       Int      @default(0)
  foodLost        Int      @default(0)
  newTroopers     Int      @default(0)
  newTurrets      Int      @default(0)
  newBombers      Int      @default(0)
  newTanks        Int      @default(0)
  newCarriers     Int      @default(0)
  // Phase two - taxes and feeding - PAYMENT
  taxRequired     Float    @default(0)
  foodArmyReq     Int      @default(0)
  foodPeopleReq   Int      @default(0)
  taxPaid         Float    @default(0)
  foodArmyPaid    Int      @default(0)
  foodPeoplePaid  Int      @default(0)
  // Phase three - increase and build - BUILD
  increaseLand    Int      @default(0)
  costIncrease    Float    @default(0)
  bldCoastal      Int      @default(0)
  bldCity         Int      @default(0)
  bldAgriculture  Int      @default(0)
  bldIndustrial   Int      @default(0)
  costBuild       Float    @default(0)
  // Phase four - ATTACK
  attacks         Attack[]
  // Phase five - CHANGE - player details
}

model Attack {
  id                Int      @default(autoincrement()) @id
  playerType        Int      //0 == real player, greater is a type
  turn              Turn     @relation(fields: [turnId], references: [id])
  turnId            Int
  tgtPlayer         Player?  @relation(fields: [tgtPlayerId], references: [id])
  tgtPlayerId       Int?
  lostTroopers      Int      @default(0)
  lostBombers       Int      @default(0)
  lostTanks         Int      @default(0)
  killedTroopers    Int      @default(0)
  killedTurrets     Int      @default(0)
  killedBombers     Int      @default(0)
  killedTanks       Int      @default(0)
  killedCarriers    Int      @default(0)
  gainedAvailLand   Int      @default(0)
  gainedCostal      Int      @default(0)
  gainedCity        Int      @default(0)
  gainedAgriculture Int      @default(0)
  gainedIndustrial  Int      @default(0)
}